@<author>{おでん}

= 遺伝的プログラミングで目指せ5000兆円
//lead{
この記事では，遺伝的プログラミングを用いて投資戦略の生成を試みる．2007年から2016年までのUSD/JPY市場でシミュレーションした結果，PFが1.8となる戦略を発見することができた．
//}

== はじめに
全人類が欲しいもの，それは5000兆円である．それは自明として，5000兆円を目指す第一歩として我々は何をしたらいいだろうか．宝くじ？神頼み？ 様々あるだろうが，投資も1つの選択肢であろう．現在，東京証券取引所では毎日株券だけで3兆円程度の金額がやりとりされており，3兆円のほんの一部ですら頂かないのは勿体ないのではないだろうか．しかし，投資というとFXで1000万溶かした話など，一般的には危険なイメージがあるかもしれない．また，そもそもどのように投資すればいいのか分からないということもあるだろう．それならば，適切な金額をコンピュータに任せ，自動でトレードさせてしまえばいいという考えが生まれる．

この考えが生まれた際に最大の問題となるのが，「どのような戦略でトレードをすればいいか」ということになる．やっぱり投資のことはよく分からないし諦めるしかないか・・・．諦めるのはまだ早い．投資戦略すらもコンピュータを使って自動で生成させてしまえばいいではないか！

この記事では，進化計算の一種である遺伝的プログラミング(Genetic Programming:GP)を用い，システムトレードの第一歩として，FXで稼げそうな投資戦略を作り出すことを目的とする．

なお，様々な本にも書いてあるが，ここでも一応記しておこう．
//caution{ 
	@<b>{ここで紹介している方法，指標で必ず儲かるということは一切保証していない．また，ここで示した方法を参考にして売買し，何らかの損失を被ったとしても，私は一切の責任を負わない．}
//}

== 遺伝的プログラミング
遺伝的プログラミングは，進化計算の一種であり，遺伝的アルゴリズム(Genetic Algorithm:GA)を拡張したものとされる．GAでは個体は配列，ベクトルで表現されるが，GPでは個体は一般的に
木構造で表現されるのが特徴である．

=== 個体表現
1つの個体は木構造で表現され，各個体は評価値を持つ．木構造により，GAでは不可能であった構造的な表現が可能となる．@<img>{GP_Tree}に具体的な個体の例を示す．
GAでは扱うことのできなかった論理式や関数，プログラムを表現することが可能となっている．

//image[GP_Tree][GPの個体表現の例][scale=0.8]

=== 複製選択
GPでは，後で述べる進化オペレータによって子個体を生成するが，その子個体を作るために親を選択する必要がある．このことを@<b>{複製選択}という．

複製選択にはいくつか種類があり，有名なのは以下の2つである．

 * @<b>{ルーレット選択}： 

 評価値の大きさに従って，集団内から個体を選択する方法．評価値が悪い個体も選ばれやすい．

 * @<b>{トーナメント選択}:

 集団内からランダムに個体を一定数抽出し，その中で最も評価値が良い個体を選択する方法．抽出する個体が多くなると，評価値が悪い個体は選ばれにくい．

=== 進化オペレータ
現世代の個体からより良い個体を生成するために，個体に対して進化オペレータを適用する．進化オペレータとして，生物が交配によって子孫を残すことをモデル化した交叉と，生物に見られる遺伝子の突然変異をモデル化した突然変異が主に用いられる．

==== 交叉
GPにおける交叉は，2つの親の部分木を入れ替える部分木交叉が用いられる．
具体的には，@<img>{XO}に示すように，部分木交叉は，親1 と親2 の交叉点をランダムに選択し，その交叉点以下の部分木を親1 と親2 で入れ替えるというオペレータである．

//image[XO][交叉][scale=0.6]

==== 突然変異
突然変異は，部分木を別の木と入れ替えるオペレータである．@<img>{Mut}に示すように，ランダムに突然変異点を選択し，その突然変異点以下の部分木を新たに生成した木と入れ替える．突然変異により，局所解から脱却することを目指している．

//image[Mut][交叉][scale=0.3]

=== 全体の流れ
GPの全体の流れを@<img>{flow}の適当なフローチャートに示す．一般的なGPとは少し違うかもしれない．例えば，フローチャートでは親と子の中から評価値の良いものを次世代の集団としているが，子個体の集合をそのまま次世代の集合にする場合のほうが
実際は多いかもしれない．まあ，こんな流れなんだなと思っていただければ良い．

//image[flow][全体の流れ][scale=0.5]

== 投資モデルの作成
いよいよ，GPの枠組みを使って投資戦略を組み立ててみたいと思う．我々が設計すべき箇所は，主に個体表現と評価基準である．この２箇所をどのように設計するかによって性能が大きく変わるので腕の見せ所である．
今回の実験で用いた個体表現と評価基準を次に示す．

=== 個体表現
今回は@<img>{ind}のように個体を設計した．生の株価を使う手法も無いことはないが，今回はテクニカル指標を組み合わせることで投資戦略を作る方式とした．ある日時のテクニカル指標データをこの木に投入し，論理式が1を返せばそのタイミングで
買うべきと言うことを示す．個体が持つ木は買う時にのみ使用し，今回はバイ・アンド・ホールド方式とした．

//image[ind][設計した個体][scale=0.5]

GPを使ってテクニカル指標を組み合わせて投資戦略を作ろうとする論文はいくつかあるが，いずれの論文も@<img>{ind_origin}の決定木のような個体表現が多い印象を受ける．しかし，個人的にこの表現が気に食わない．
理由としては，

 * 1つの個体で，売り買いを両方設定するのはおかしい．そもそも売りと買いで使うべき指標が違うはず

 * 一部の手法では決定木の終端記号に買いと売りだけを設定しており，何もしないなどの選択がない．しかし現実では，上がる確率の高いタイミングが常に存在するかと言われると疑問であり，むしろ何もしない場合のほうが多いはず

がある．ここらへんは好みの問題であり，「ぼくがかんがえたさいきょうのこたい」を作ることができるのも面白いところだと思う．
//image[ind_origin][よくあるGP個体][scale=0.5]

=== 評価基準
評価基準，つまりどのような投資戦略を良いとするかを決定付ける指標である．様々な基準があり，勝率，利益額…こちらも好みや状況によって使い分けるのが良いだろう．
ここではプロフィットファクター(Profit Factor;PF)を用いる．PFは次式で定義される．

//demathraw{
PF = \frac{トレードにより発生した総利益}{トレードにより発生した総損失}
//}

利益だけでなくリスクも考慮している点が優れている．もしどうしても損失したくない！！！！！ということであれば，より厳しい基準@<fn>{fn:hint}を設けたり勝率も考慮すれば良い．
//footnote[fn:hint][ヒント：ドローダウン]

=== 投資の心得
実験に移る前に，投資をする際の基本的な心構えについて触れておこう．いくつかのシステムトレードや株式トレードに関する本を読んだ中で，
重要だと思うものを2つピックアップする．

 * 100%勝つなんてことはあり得ない いかにして損失を抑えるかが重要であり，少額の損失で切るのがプロ

 * 投資をする際に最も障壁となるのは感情であり，いかにして感情をコントロールするのが成功の鍵

どのシステムトレードの本にも書かれていることだが，感情に惑わされずに一定の戦略をとり続けることが重要である．これこそ人間が苦手であり，コンピュータ
が得意な分野ではないだろうか．人間はどうしても「今は損してるけどこの後上がるはずなんだ」や「今も儲かってるけどまだまだこの株は上がるはずなんだ」
などの欲がどうしても出てしまい判断が狂ってしまいがちなのだ．自動トレードシステムを構築すれば，そういった要素を一切排除できるのも魅力である@<fn>{fn:memo}．
//footnote[fn:memo][プログラマーこそが投資に向いていると個人的に思っている．]

== 実験
前で述べたアルゴリズムを使って，実際の為替市場で通用するかを確かめてみよう．

=== 使用するデータ
使用するデータは， @<href>{http://www.forextester.com/data/datasources} から取得できるUSD/JPYの2007年から2016年のデータとする．サイトから取得できるデータは1分足データであるが，
これを10分足に加工し，この時間軸でテクニカル指標のデータを生成した．10分足データにした理由は，ノイズを除去するためである．


=== 実験設定
今回はUSD/JPYを買いのみ行い，GPの個体によって得られるタイミングで買ってから，100分(=10分足 × 10本)だけ保持したら必ず売るという方法を取る．短期なのにバイ・アンド・ホールド
のような手法を取っているのはおかしいかもしれないが，ここは今後の課題とする．

実験で用いるパラメータを@<table>{param}に示す．
最大トレード数は，ある程度タイミングを選別したいという理由で導入した．最小トレード数は，あまりに取引回数が少なすぎるとある一部分を過学習してしまい汎用性がなくなるため，
これを防ぐために導入した．また，今回はスワップポイント，強制決済，スプレッドに関しては考慮していない．

//table[param][実験設定]{
パラメータ	値
-------------------------------------------------------------
最大世代数 	  30
集団数     	 3000
交叉率     	 0.90
突然変異率 	 0.10
木の最大高さ 	 15
最大トレード数 	 年720回
最小トレード数 	 年120回
複製選択方式 	 ルーレット選択
評価基準	 PF
//}

=== 実験結果
30世代計算終了後の最良個体の木を展開したものを次に示す．このテクニカル指標の組み合わせに適合するタイミングで買うと，集団内では最も良い成績だったということを意味する．

//embed{
(((RSISign = -1  AND (((DeviationSign = 1  AND MATrend = 1 ) OR (PsychologicalSign = -1  AND DMITrend = 1 )) OR MACDSign = 1 )) OR (DeviationSign = 1  AND MATrend = 1 )) AND (((HLBand = 1  OR MACDSign = 1 ) AND ParabolicSign = 1 ) OR (MASign = 1  AND ((MASign = 1  AND ((PivotSign = 1  OR (((FourWeeksRule = 1  AND RSISign = 1 ) OR StochasticSign = 1 ) AND (MACDTrend = 1  OR (ParabolicTrend = -1  OR ParabolicTrend = 1 )))) OR (((MASign = -1  AND ROCSign = 1 ) OR (MACDTrend = 1  AND DMITrend = -1 )) OR (((ParabolicSign = -1  OR DeviationSign = -1 ) AND (perRSign = -1  OR ROCSign = 1 )) OR (FourWeeksRule = -1  AND DeviationSign = 1 ))))) OR MACDSign = 1 ))))
//}

初めて見た人はなんじゃこりゃと思うだろう．個々のテクニカル指標は置いといて，投資戦略がとても長い文字列となっている．これは，GPのブロートという現象であり，探索過程で木のノード数が
増加してしまう問題である．結果としてとても複雑な戦略となっている．

上記の戦略を2007年から2016年のUSD/JPYでシミュレーションした結果を@<table>{result}に示す．興味深い点としては，PFが1.8という好成績を収めているにも関わらず勝率は5割を下回っている
点である．これは，「1回の取引で損することは多いが損失は少なく，利益は大きい」という戦略になっているということが言えよう．売る際の条件を適当にしたにも関わらず，このような利益を生み出せる結果と
なったのは少々意外であった．

//table[result][実験結果]{
勝率	0.463
PF	1.809
//}

試しに2007年から2016年までシミュレーションをした結果を@<img>{Asset}に示す．リーマン・ショック辺りではさすがに利益を生み出すことができていないが大したドローダウンもない．そして，円安が進んだ2012年以降から順調に利益を出し，最終的には10年で資産が4倍に増えた．年利に換算するとだいたい15%で，バブル期を凌駕する金利となり，失われた20年を取り戻すことができた．

//image[Asset][シミュレーション結果][scale=0.5]

== おわりに
この記事では，進化戦略の一種である遺伝的プログラミングを用いてFXの売買に挑んだ．実験により，過去10年で通用する戦略を生み出すことができることが確認された．ただし，注意したいのは，今回見つけたのは
@<b>{過去10年で通用する戦略であって，今後通用するとは限らない}ということである．実際，今後どのような値動きになるかは誰にもわからない．

今後の課題としては以下が挙げられる．

 * @<b>{様々な市場での適用}：

 今回はFX市場での実験を行ったが，もちろん株式市場にも適用可能である．実のところ，私は日本株をメインにこの手法を使っているが，今回生成された戦略と異なるタイプの戦略が生み出されることが確認でき，とても面白いので各自で試していただきたい．

 * @<b>{バイ・アンド・ホールドからの脱却}：

 今回は買うタイミングのみを調べる戦略を生成した．同様にして，売る際のタイミングを調べる戦略を生成することでさらなる性能向上が見込める．この「売る」というのは，空売りも保持している資産を売ること両方を指している．
 ただし，空売りの戦略を立てる際には踏み上げられないように注意したい．
