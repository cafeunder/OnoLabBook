@<author>{かふぇした}

= GAで解く巡回セールスマン問題
//lead{
みんな巡れー！
//}

== はじめに
=== この記事のやりたいこと
 * @<b>{遺伝的アルゴリズム (GA) で}
 * @<b>{数万都市巡回セールスマン問題 (TSP) を}
 * @<b>{高精度に解く！}

@<b>{組合せ最適化問題}とは，ある条件の下で最も良い組合せを見つける問題のことを言います．
組合せ最適化問題は，都市計画や業務効率化，製品設計など様々な場面で直面する重要な問題であるため，
その解法も理論的なものから実用的なものまで広く研究されています．
そして，人間の脳が論理的思考に甚だ向いていないことを考えると，
解法（＝アルゴリズム）をプログラムで記述し，コンピュータに解かせる．というのが賢い選択というものです．

このとき，ある問題における解のなかで最も良い解を@<b>{最適解}と言います．
また，得られる解が必ず最適解であるようなアルゴリズムを@<b>{厳密解法}と言い，
厳密解法によって得られた解を@<b>{厳密解}と言います．
できれば，厳密解法を使って組合せ最適化問題を解きたい！というところですが，
組合せ最適化問題の中には，コンピュータですら厳密解を得るのが困難なものがあります．
ここでいう困難であるとは，正確な解を得るために膨大な時間がかかったり，膨大な記憶領域が必要となることを言います．
そこで@<b>{近似解法}の登場です．近似解法とは，現実的な実行コストでそこそこ良い解を得る手法のことです．
そもそも，膨大な実行コストをかけてまで最適解を知る必要があるかと聞かれれば，ほとんどの場合はNoでしょう@<fn>{fn_no}．
ということで，「そこそこ速く，そこそこ良い解が得られる近似解法」が現実社会では重要になります．
//footnote[fn_no][実行コストがどこまで許容できるか，というのは応用する場面によります．業務効率化や製品設計などはある程度時間をかけても良いでしょうが，組合せ最適化でいう膨大な時間とは数万年や数億年はザラなので，その場合はやはり近似解法に頼ることになります．]

近似解法や厳密解法といったアルゴリズムは人間が考案するものですが，
組合せ最適化問題に汎用的な解き方というのは存在せず，
実用の場面では人間の勘やノウハウの応用に頼っているのが現実です．
そのため，組合せ最適化問題の汎用的なアルゴリズムを開発することは，
関連する研究者たちの大きな目標でもあります．
@<b>{進化計算}は，そんな汎用的手法のひとつです．

本記事では，組合せ最適化問題を代表する問題である巡回セールスマン問題を，
進化計算の一形態である遺伝的アルゴリズムを使って解く手法について解説します．

=== 巡回セールスマン問題
@<b>{巡回セールスマン問題(Traveling Salesman Problem: 以下TSP)}は困難な組合せ最適化問題のひとつです．
TSPは，@<m>{N}個の都市と各都市間の距離が与えられたとき，
全ての都市を訪問し最初の都市に戻ってくるような経路のうち，
最も移動距離が短くなるような経路を求める問題です．
参考として，@<img>{tours}に10都市TSPにおける経路の例を示します．
//image[tours][10都市TSPの例．解の候補として3つの経路を示している．]

TSPは配送問題や基盤穿孔，遺伝子構造解析とか，色々なことに使えるという触れ込みですが@<fn>{fn_truth}，
それよりも@<u>{定義が単純で，得られる解が視覚的に理解できる}という性質から，近似解法のベンチマーク問題としてよく利用されます．
組合せ最適化問題の近似解法は，異なる問題でも考え方や工夫を流用できることが多いため，
定義が単純でノウハウを流用しやすく，現象が理解しやすいTSPが好まれるわけです．
//footnote[fn_truth][実際には，そんな都合良くTSPとして捉えることはできません．]

== 遺伝的アルゴリズム
@<b>{遺伝的アルゴリズム (GA) }は，生物の進化過程を模倣した汎用的近似解法の枠組みです．
GAでは，解候補をひとつの個体としてみなし，問題によって与えられる評価値@<fn>{fn_eval}を環境への適合度として考えます．
そして，環境に生息する個体が@<b>{世代交代}を繰り返すことで，より良い個体（＝解候補）を発見することを期待します．
//footnote[fn_eval][その解がどれほど良いかの指標．巡回セールスマン問題であれば，経路長が短いほど良い個体＝評価値の高い個体となります．]

=== 遺伝的オペレータ
世代交代@<m>{\mathscr{A\}}

== GA-EAX
=== 概要

=== 交叉EAX
#@# 親個体のマージ，AB-Cycle構成，E-Set構成，中間個体の生成，緩和個体の修正

=== E-Set構成の戦略
#@# Random戦略，Single戦略，Block2戦略

=== 全体のアルゴリズム
#@# 自然言語で，てきとーに

== ベンチマーク
#@# ca, fi, bm, ch, monaでやる
